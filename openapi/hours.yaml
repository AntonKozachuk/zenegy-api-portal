swagger: '2.0'
info:
  version: '1.0'
  title: '1.0'
  contact:
    email: jovan@zenegy
paths:
  '/api/hours/accounts/{accountUid}/rates':
    get:
      tags:
        - AccountRate
      operationId: GetRates
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: isStandard
          in: query
          required: false
          type: boolean
        - name: isDisabled
          in: query
          required: false
          type: boolean
        - name: search
          in: query
          required: false
          type: string
        - name: sortOptions
          in: query
          required: false
          type: integer
          format: int32
        - name: overrides
          in: query
          required: false
          type: array
          items:
            type: boolean
          collectionFormat: multi
          uniqueItems: false
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[RateDto]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
    post:
      tags:
        - AccountRate
      operationId: AddAccountRate
      consumes:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccountRateRequestDto'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[AccountRateLimitDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/rates/international':
    get:
      tags:
        - AccountRate
      operationId: GetRatesAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: search
          in: query
          required: false
          type: string
        - name: sortOptions
          in: query
          required: false
          type: integer
          format: int32
        - name: isDisabled
          in: query
          required: false
          type: boolean
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[HourRateBaseDto]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
    post:
      tags:
        - AccountRate
      operationId: AddAccountRateAsync
      consumes:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/HourRateRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[HourRateDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/rates/{rateUid}':
    get:
      tags:
        - AccountRate
      operationId: GetRateDetails
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: rateUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[AccountRateLimitDto]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
    delete:
      tags:
        - AccountRate
      operationId: DeleteRate
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: rateUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
    patch:
      tags:
        - AccountRate
      operationId: UpdateAccountRate
      consumes:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: rateUid
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccountRateRequestDto'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/rates/international/{rateUid}':
    get:
      tags:
        - AccountRate
      operationId: GetRateAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: rateUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[HourRateDto]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
    patch:
      tags:
        - AccountRate
      operationId: UpdateAccountRateAsync
      consumes:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: rateUid
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/HourRateRequest'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/rates/{rateUid}/disable':
    patch:
      tags:
        - AccountRate
      operationId: DisableRate
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: rateUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/rates/delete-overrides':
    post:
      tags:
        - AccountRate
      operationId: DeleteCompanyExtraHourPaymentRateOverridesAsync
      consumes:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/HourRateOverridesDeleteRequest'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/registrations':
    get:
      tags:
        - AccountsHours
      operationId: GetAccountsHourRegistrations
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: status
          in: query
          required: false
          type: integer
          format: int32
        - name: showStandard
          in: query
          required: false
          type: boolean
        - name: userUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: departmentUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: rateUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: startDate
          in: query
          required: false
          type: string
          format: date-time
        - name: endDate
          in: query
          required: false
          type: string
          format: date-time
        - name: payrollNumbers
          in: query
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
          uniqueItems: false
        - name: attachments
          in: query
          required: false
          type: integer
          format: int32
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
    delete:
      tags:
        - AccountsHours
      operationId: DeleteRegistrationAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: newStatus
          in: query
          required: false
          type: integer
          format: int32
        - name: registrationUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: status
          in: query
          required: false
          type: integer
          format: int32
        - name: showStandard
          in: query
          required: false
          type: boolean
        - name: userUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: departmentUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: rateUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: startDate
          in: query
          required: false
          type: string
          format: date-time
        - name: endDate
          in: query
          required: false
          type: string
          format: date-time
        - name: payrollNumbers
          in: query
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
          uniqueItems: false
        - name: attachments
          in: query
          required: false
          type: integer
          format: int32
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/registrations/status':
    patch:
      tags:
        - AccountsHours
      operationId: ChangeStatusRegistrationAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: newStatus
          in: query
          required: false
          type: integer
          format: int32
        - name: registrationUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: status
          in: query
          required: false
          type: integer
          format: int32
        - name: showStandard
          in: query
          required: false
          type: boolean
        - name: userUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: departmentUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: rateUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: startDate
          in: query
          required: false
          type: string
          format: date-time
        - name: endDate
          in: query
          required: false
          type: string
          format: date-time
        - name: payrollNumbers
          in: query
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
          uniqueItems: false
        - name: attachments
          in: query
          required: false
          type: integer
          format: int32
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/registrations/{registrationUid}':
    delete:
      tags:
        - AccountsHours
      operationId: DeleteRegistrationAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: registrationUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/registrations/bulk':
    post:
      tags:
        - AccountsHours
      operationId: InsertHourRegistrationsAsync
      consumes:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/BulkRegistrationRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/registrations/attachments':
    post:
      tags:
        - AccountsHours
      operationId: PostHourRegistrationAttachmentsAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/registrations/{registrationUid}/attachments/{attachmentUid}':
    get:
      tags:
        - AccountsHours
      operationId: GetAccountsRegistrationAttachmentLocationAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: registrationUid
          in: path
          required: true
          type: string
          format: uuid
        - name: attachmentUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/registrations/payrolls':
    get:
      tags:
        - AccountsHours
      operationId: GetRegistrationPayrollNumbers
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[UInt32]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/registrations/departments':
    get:
      tags:
        - AccountsHours
      operationId: GetAccountDepartmentsAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[AccountDepartmentBaseDto]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users':
    get:
      tags:
        - User
      operationId: GetUsersAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[UserDto]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/allowedusers':
    get:
      tags:
        - User
      operationId: GetAllowedUsersAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[UserDto]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}':
    get:
      tags:
        - User
      operationId: GetUserAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[UserDto]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/groups':
    get:
      tags:
        - UserGroups
      operationId: GetAccountDepartmentsAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[UserGroupDto]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/registrations':
    get:
      tags:
        - UserHours
      operationId: GetUserRegistrations
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: status
          in: query
          required: false
          type: integer
          format: int32
        - name: showStandard
          in: query
          required: false
          type: boolean
        - name: userUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: departmentUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: rateUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: startDate
          in: query
          required: false
          type: string
          format: date-time
        - name: endDate
          in: query
          required: false
          type: string
          format: date-time
        - name: payrollNumbers
          in: query
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
          uniqueItems: false
        - name: attachments
          in: query
          required: false
          type: integer
          format: int32
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
    post:
      tags:
        - UserHours
      operationId: InsertUserRegistration
      consumes:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/RegistrationRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
    delete:
      tags:
        - UserHours
      operationId: DeleteUserRegistrationsAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: newStatus
          in: query
          required: false
          type: integer
          format: int32
        - name: registrationUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: status
          in: query
          required: false
          type: integer
          format: int32
        - name: showStandard
          in: query
          required: false
          type: boolean
        - name: userUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: departmentUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: rateUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: startDate
          in: query
          required: false
          type: string
          format: date-time
        - name: endDate
          in: query
          required: false
          type: string
          format: date-time
        - name: payrollNumbers
          in: query
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
          uniqueItems: false
        - name: attachments
          in: query
          required: false
          type: integer
          format: int32
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/registrations/{registrationUid}':
    get:
      tags:
        - UserHours
      operationId: GetUserRegistration
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: registrationUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
    delete:
      tags:
        - UserHours
      operationId: DeleteUserRegistration
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: registrationUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
    patch:
      tags:
        - UserHours
      operationId: UpdateUserRegistration
      consumes:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: registrationUid
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/RegistrationRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/registrations/status':
    patch:
      tags:
        - UserHours
      operationId: ChangeStatusRegistrationAsyncUserRegistration
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: newStatus
          in: query
          required: false
          type: integer
          format: int32
        - name: registrationUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: status
          in: query
          required: false
          type: integer
          format: int32
        - name: showStandard
          in: query
          required: false
          type: boolean
        - name: userUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: departmentUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: rateUids
          in: query
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: multi
          uniqueItems: false
        - name: startDate
          in: query
          required: false
          type: string
          format: date-time
        - name: endDate
          in: query
          required: false
          type: string
          format: date-time
        - name: payrollNumbers
          in: query
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
          uniqueItems: false
        - name: attachments
          in: query
          required: false
          type: integer
          format: int32
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/registrations/attachments':
    post:
      tags:
        - UserHours
      operationId: PostRegistrationAttachmentsAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/registrations/{registrationUid}/attachments/{attachmentUid}':
    get:
      tags:
        - UserHours
      operationId: GetUserHourRegistrationAttachmentLocationAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: registrationUid
          in: path
          required: true
          type: string
          format: uuid
        - name: attachmentUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[RegistrationDto]'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ProblemDetails'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/registrations/payrolls':
    get:
      tags:
        - UserHours
      operationId: GetRegistrationPayrollNumbers
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: skip
          in: query
          required: false
          type: integer
          format: int32
        - name: take
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[UInt32]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/registrations/departments':
    get:
      tags:
        - UserHours
      operationId: GetUserDepartmentBaseAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[AccountDepartmentBaseDto]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/rates':
    get:
      tags:
        - UserRate
      operationId: GetUserRates
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[UserRateDto]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/rates/international':
    get:
      tags:
        - UserRate
      operationId: GetUserRatesAsync
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[PagedResponse[UserHourRateDto]]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
  '/api/hours/accounts/{accountUid}/users/{userUid}/rates/{rateUid}':
    get:
      tags:
        - UserRate
      operationId: GetUserRate
      consumes: []
      produces:
        - application/json;odata.metadata=minimal;odata.streaming=true
        - application/json;odata.metadata=minimal;odata.streaming=false
        - application/json;odata.metadata=minimal
        - application/json;odata.metadata=full;odata.streaming=true
        - application/json;odata.metadata=full;odata.streaming=false
        - application/json;odata.metadata=full
        - application/json;odata.metadata=none;odata.streaming=true
        - application/json;odata.metadata=none;odata.streaming=false
        - application/json;odata.metadata=none
        - application/json;odata.streaming=true
        - application/json;odata.streaming=false
        - application/json
        - application/xml
        - application/prs.mock-odata
        - text/plain
        - text/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          format: uuid
        - name: userUid
          in: path
          required: true
          type: string
          format: uuid
        - name: rateUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Result[UserRateDto]'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ProblemDetails'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ProblemDetails'
definitions:
  'Result[PagedResponse[RateDto]]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/PagedResponse[RateDto]'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'PagedResponse[RateDto]':
    type: object
    properties:
      totalRecords:
        format: int32
        type: integer
      totalDisplayRecords:
        format: int32
        type: integer
      data:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/RateDto'
  RateDto:
    type: object
    properties:
      paymentPerRate:
        format: double
        type: number
      isDisabled:
        type: boolean
      limitUserAccess:
        type: boolean
      overrideRate:
        type: boolean
      name:
        type: string
      number:
        type: string
      isStandard:
        type: boolean
      denmarkSpecificData:
        $ref: '#/definitions/DenmarkSpecificData'
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  DenmarkSpecificData:
    type: object
    properties:
      excludeHours:
        type: boolean
      hasOverride:
        type: boolean
      accountNumber:
        type: string
      creditAccountNumber:
        type: string
      wageCode:
        type: string
      accountText:
        type: string
      isBenefitPackageTwoEnabled:
        type: boolean
      isTimeInLieuEnabled:
        type: boolean
      ratio:
        format: double
        type: number
  ProblemDetails:
    type: object
    properties:
      type:
        type: string
      title:
        type: string
      status:
        format: int32
        type: integer
      detail:
        type: string
      instance:
        type: string
    additionalProperties:
      type: object
  AccountRateRequestDto:
    type: object
    properties:
      name:
        type: string
      number:
        type: string
      allowedUserGroups:
        uniqueItems: false
        type: array
        items:
          format: uuid
          type: string
      allowedUsers:
        uniqueItems: false
        type: array
        items:
          format: uuid
          type: string
      limitUserAccess:
        type: boolean
      isStandard:
        type: boolean
      overrideRate:
        type: boolean
      denmarkSpecificData:
        $ref: '#/definitions/DenmarkSpecificData'
      paymentPerRate:
        format: double
        type: number
  'Result[AccountRateLimitDto]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/AccountRateLimitDto'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  AccountRateLimitDto:
    type: object
    properties:
      allowedUsers:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LimitRateToUserDto'
      allowedUserGroups:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LimitRateToUserGroupDto'
      paymentPerRate:
        format: double
        type: number
      isDisabled:
        type: boolean
      limitUserAccess:
        type: boolean
      overrideRate:
        type: boolean
      name:
        type: string
      number:
        type: string
      isStandard:
        type: boolean
      denmarkSpecificData:
        $ref: '#/definitions/DenmarkSpecificData'
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  LimitRateToUserDto:
    type: object
    properties:
      name:
        type: string
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  LimitRateToUserGroupDto:
    type: object
    properties:
      name:
        type: string
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  'Result[PagedResponse[HourRateBaseDto]]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/PagedResponse[HourRateBaseDto]'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'PagedResponse[HourRateBaseDto]':
    type: object
    properties:
      totalRecords:
        format: int32
        type: integer
      totalDisplayRecords:
        format: int32
        type: integer
      data:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/HourRateBaseDto'
  HourRateBaseDto:
    type: object
    properties:
      name:
        type: string
      number:
        type: string
      paymentPerRate:
        format: double
        type: number
      limitUserAccess:
        type: boolean
      overrideRate:
        type: boolean
      accountNumberDebit:
        type: string
      accountNumberCredit:
        type: string
      wageTypeCode:
        type: string
      wageTypeName:
        type: string
      isDisabled:
        type: boolean
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  HourRateRequest:
    type: object
    properties:
      name:
        type: string
      number:
        type: string
      paymentPerRate:
        format: double
        type: number
      limitUserAccess:
        type: boolean
      overrideRate:
        type: boolean
      accountNumberDebit:
        type: string
      accountNumberCredit:
        type: string
      wageTypeCode:
        type: string
      wageTypeName:
        type: string
      isDisabled:
        type: boolean
      allowedUsers:
        uniqueItems: false
        type: array
        items:
          format: uuid
          type: string
      allowedUserGroups:
        uniqueItems: false
        type: array
        items:
          format: uuid
          type: string
  'Result[HourRateDto]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/HourRateDto'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  HourRateDto:
    type: object
    properties:
      allowedUsers:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LimitRateToUserDto'
      allowedUserGroups:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/LimitRateToUserGroupDto'
      name:
        type: string
      number:
        type: string
      paymentPerRate:
        format: double
        type: number
      limitUserAccess:
        type: boolean
      overrideRate:
        type: boolean
      accountNumberDebit:
        type: string
      accountNumberCredit:
        type: string
      wageTypeCode:
        type: string
      wageTypeName:
        type: string
      isDisabled:
        type: boolean
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  HourRateOverridesDeleteRequest:
    required:
      - hourRateUids
    type: object
    properties:
      hourRateUids:
        uniqueItems: false
        type: array
        items:
          format: uuid
          type: string
  'Result[RegistrationDto]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/RegistrationDto'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  RegistrationDto:
    type: object
    properties:
      attachments:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/RegistrationAttachmentDto'
      hours:
        format: double
        type: number
      rate:
        format: double
        type: number
      total:
        format: double
        type: number
      note:
        type: string
      status:
        format: int32
        type: integer
      date:
        format: date-time
        type: string
      periodFrom:
        format: date-time
        type: string
      periodTo:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/UserBase'
      hourPaymentRate:
        $ref: '#/definitions/RateDto'
      department:
        $ref: '#/definitions/AccountDepartmentBaseDto'
      projectId:
        type: string
      break:
        format: double
        type: number
      calculatedHours:
        format: double
        type: number
      attachmentCount:
        format: int32
        type: integer
      payrollNumber:
        format: int32
        type: integer
      country:
        $ref: '#/definitions/RegistrationCountryDto'
      costCenterUid:
        format: uuid
        type: string
      shouldTriggerRetro:
        type: boolean
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  RegistrationAttachmentDto:
    type: object
    properties:
      attachmentId:
        type: string
      name:
        type: string
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  UserBase:
    type: object
    properties:
      name:
        type: string
      employeeNumber:
        type: string
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  AccountDepartmentBaseDto:
    type: object
    properties:
      name:
        type: string
      number:
        type: string
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  RegistrationCountryDto:
    type: object
    properties:
      countryUid:
        format: uuid
        type: string
      countryIncomeTaxable:
        type: boolean
      countryTaxPercentage:
        format: double
        type: number
  BulkRegistrationRequest:
    type: object
    properties:
      registrationRequests:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/UserRegistrationRequest'
      groupedRegistrationRequests:
        uniqueItems: false
        type: array
        items:
          uniqueItems: false
          type: array
          items:
            $ref: '#/definitions/RegistrationBaseRequest'
        readOnly: true
      userUids:
        uniqueItems: false
        type: array
        items:
          format: uuid
          type: string
        readOnly: true
      arePeriodsValid:
        $ref: '#/definitions/Result'
        readOnly: true
  UserRegistrationRequest:
    type: object
    properties:
      userUid:
        format: uuid
        type: string
      hours:
        format: double
        type: number
      rate:
        format: double
        type: number
      note:
        type: string
      date:
        format: date-time
        type: string
      from:
        format: date-time
        type: string
      to:
        format: date-time
        type: string
      hourPaymentRateUid:
        format: uuid
        type: string
      accountDepartmentUid:
        format: uuid
        type: string
      projectId:
        type: string
      status:
        format: int32
        type: integer
      break:
        format: double
        type: number
      country:
        $ref: '#/definitions/RegistrationCountryDto'
      costCenterUid:
        format: uuid
        type: string
      shouldTriggerRetro:
        type: boolean
  RegistrationBaseRequest:
    type: object
    properties:
      hours:
        format: double
        type: number
      rate:
        format: double
        type: number
      note:
        type: string
      date:
        format: date-time
        type: string
      from:
        format: date-time
        type: string
      to:
        format: date-time
        type: string
      hourPaymentRateUid:
        format: uuid
        type: string
      accountDepartmentUid:
        format: uuid
        type: string
      projectId:
        type: string
      status:
        format: int32
        type: integer
      break:
        format: double
        type: number
      country:
        $ref: '#/definitions/RegistrationCountryDto'
      costCenterUid:
        format: uuid
        type: string
      shouldTriggerRetro:
        type: boolean
  Result:
    type: object
    properties:
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'Result[PagedResponse[UInt32]]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/PagedResponse[UInt32]'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'PagedResponse[UInt32]':
    type: object
    properties:
      totalRecords:
        format: int32
        type: integer
      totalDisplayRecords:
        format: int32
        type: integer
      data:
        uniqueItems: false
        type: array
        items:
          format: int32
          type: integer
  'Result[PagedResponse[AccountDepartmentBaseDto]]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/PagedResponse[AccountDepartmentBaseDto]'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'PagedResponse[AccountDepartmentBaseDto]':
    type: object
    properties:
      totalRecords:
        format: int32
        type: integer
      totalDisplayRecords:
        format: int32
        type: integer
      data:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/AccountDepartmentBaseDto'
  'Result[PagedResponse[UserDto]]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/PagedResponse[UserDto]'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'PagedResponse[UserDto]':
    type: object
    properties:
      totalRecords:
        format: int32
        type: integer
      totalDisplayRecords:
        format: int32
        type: integer
      data:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/UserDto'
  UserDto:
    type: object
    properties:
      roles:
        uniqueItems: false
        type: array
        items:
          enum:
            - DepartmentManager
            - CompanyOwner
            - Employee
            - PayrollAdminFull
            - PayrollAdminLimited
            - PayrollAdmin
            - AccountAdminFull
            - AccountAdminLimited
            - AccountAdmin
            - ItemsAndAccessManager
            - Consultant
            - DepartmentManagerLimited
            - Supporter
            - CoursesManager
            - DocumentManager
            - DocumentViewer
            - TemplateManager
            - TemplateExecutor
            - ExpenseManager
            - ExpenseUser
          type: string
      name:
        type: string
      email:
        type: string
      photoUrl:
        type: string
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  'Result[UserDto]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/UserDto'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'Result[PagedResponse[UserGroupDto]]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/PagedResponse[UserGroupDto]'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'PagedResponse[UserGroupDto]':
    type: object
    properties:
      totalRecords:
        format: int32
        type: integer
      totalDisplayRecords:
        format: int32
        type: integer
      data:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/UserGroupDto'
  UserGroupDto:
    type: object
    properties:
      name:
        type: string
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  RegistrationRequest:
    type: object
    properties:
      attachmentUids:
        uniqueItems: false
        type: array
        items:
          format: uuid
          type: string
      hours:
        format: double
        type: number
      rate:
        format: double
        type: number
      note:
        type: string
      date:
        format: date-time
        type: string
      from:
        format: date-time
        type: string
      to:
        format: date-time
        type: string
      hourPaymentRateUid:
        format: uuid
        type: string
      accountDepartmentUid:
        format: uuid
        type: string
      projectId:
        type: string
      status:
        format: int32
        type: integer
      break:
        format: double
        type: number
      country:
        $ref: '#/definitions/RegistrationCountryDto'
      costCenterUid:
        format: uuid
        type: string
      shouldTriggerRetro:
        type: boolean
  'Result[AccountDepartmentBaseDto]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/AccountDepartmentBaseDto'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'Result[PagedResponse[UserRateDto]]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/PagedResponse[UserRateDto]'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'PagedResponse[UserRateDto]':
    type: object
    properties:
      totalRecords:
        format: int32
        type: integer
      totalDisplayRecords:
        format: int32
        type: integer
      data:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/UserRateDto'
  UserRateDto:
    type: object
    properties:
      userId:
        format: int32
        type: integer
      paymentPerRate:
        format: double
        type: number
      isDisabled:
        type: boolean
      limitUserAccess:
        type: boolean
      overrideRate:
        type: boolean
      name:
        type: string
      number:
        type: string
      isStandard:
        type: boolean
      denmarkSpecificData:
        $ref: '#/definitions/DenmarkSpecificData'
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  'Result[PagedResponse[UserHourRateDto]]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/PagedResponse[UserHourRateDto]'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
  'PagedResponse[UserHourRateDto]':
    type: object
    properties:
      totalRecords:
        format: int32
        type: integer
      totalDisplayRecords:
        format: int32
        type: integer
      data:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/UserHourRateDto'
  UserHourRateDto:
    type: object
    properties:
      userUid:
        format: uuid
        type: string
      name:
        type: string
      number:
        type: string
      paymentPerRate:
        format: double
        type: number
      limitUserAccess:
        type: boolean
      overrideRate:
        type: boolean
      accountNumberDebit:
        type: string
      accountNumberCredit:
        type: string
      wageTypeCode:
        type: string
      wageTypeName:
        type: string
      isDisabled:
        type: boolean
      id:
        format: int32
        type: integer
      uid:
        format: uuid
        type: string
  'Result[UserRateDto]':
    type: object
    properties:
      isEmpty:
        type: boolean
        readOnly: true
      value:
        $ref: '#/definitions/UserRateDto'
        readOnly: true
      isFailure:
        type: boolean
        readOnly: true
      isSuccess:
        type: boolean
        readOnly: true
      isNotFound:
        type: boolean
        readOnly: true
      message:
        type: string
        readOnly: true
      resultType:
        enum:
          - InternalError
          - Ok
          - NotFound
          - Forbidden
          - Conflicted
          - Invalid
          - Unauthorized
        type: string
        readOnly: true
      httpStatusCode:
        enum:
          - Continue
          - SwitchingProtocols
          - Processing
          - EarlyHints
          - OK
          - Created
          - Accepted
          - NonAuthoritativeInformation
          - NoContent
          - ResetContent
          - PartialContent
          - MultiStatus
          - AlreadyReported
          - IMUsed
          - MultipleChoices
          - Ambiguous
          - MovedPermanently
          - Moved
          - Found
          - Redirect
          - SeeOther
          - RedirectMethod
          - NotModified
          - UseProxy
          - Unused
          - TemporaryRedirect
          - RedirectKeepVerb
          - PermanentRedirect
          - BadRequest
          - Unauthorized
          - PaymentRequired
          - Forbidden
          - NotFound
          - MethodNotAllowed
          - NotAcceptable
          - ProxyAuthenticationRequired
          - RequestTimeout
          - Conflict
          - Gone
          - LengthRequired
          - PreconditionFailed
          - RequestEntityTooLarge
          - RequestUriTooLong
          - UnsupportedMediaType
          - RequestedRangeNotSatisfiable
          - ExpectationFailed
          - MisdirectedRequest
          - UnprocessableEntity
          - Locked
          - FailedDependency
          - UpgradeRequired
          - PreconditionRequired
          - TooManyRequests
          - RequestHeaderFieldsTooLarge
          - UnavailableForLegalReasons
          - InternalServerError
          - NotImplemented
          - BadGateway
          - ServiceUnavailable
          - GatewayTimeout
          - HttpVersionNotSupported
          - VariantAlsoNegotiates
          - InsufficientStorage
          - LoopDetected
          - NotExtended
          - NetworkAuthenticationRequired
        type: string
        readOnly: true
securityDefinitions:
  oauth2:
    flow: implicit
    authorizationUrl: 'https://auth.zenegy.com/auth/authorize'
    tokenUrl: 'https://auth.zenegy.com/auth/token'
    scopes:
      Key: 'scope:hours'
    type: oauth2
    description: Hours OAuth2 Implicit Grant
security:
  - oauth2:
      - 'scope:hours'
